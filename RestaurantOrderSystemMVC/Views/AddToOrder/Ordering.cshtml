@using RestaurantOrderSystem.Models

@{
	//IEnumerable<Menu> MenuData = ViewData["MenuData"] as IEnumerable<Menu>;
	//Dictionary<int,Menu> MenuItems = new Dictionary<int, Menu>();
	//foreach (Menu item in MenuData)
	//{
	//	MenuItems[item.ItemId] = item;
	//}

	//var temp = Json.Serialize(MenuItems);
	ViewData["Title"] = "Ordering";

}


<script>
	const success = '@ViewBag.Success';
	if (success != "False") {
		Swal.fire(
		  'Awesome!',
		  'You just placed an order!',
		  'success'
		)
        @ViewBag.Success = false;
	}
	console.log(success);
</script>

<h1>Order Now!</h1>

	<div class="form-group">
		<label class="control-label" style="margin-right:50px;">Menu</label>

		<label class="control-label">Quantity:</label>
		<input type="number" id="quantity" value="1" onchange="verifyQuantity()">

		<button class="btn btn-outline-primary mx-5 mb-2" onclick="addToOrder()">Add</button>

		<select class ="form-control" id="menuList" size="8" asp-items="ViewBag.MenuList" onchange="updateDisplay(value)"></select>
	</div>

	<div class="form-group">
		<label class="control-label">Description</label>
		<input type="text" id="desc" class="form-control" value="" readonly>
	</div>

	<div class="form-group">
		<label class="control-label">Notes</label>
		<input type="text" id="notes" class="form-control" value="" readonly>
	</div>

	<div class="form-group">
		<label class="control-label">Price</label>
		<input type="text" id="price" class="form-control" value="" readonly>
		<input hidden type="text" id="name" class="form-control" value="" readonly>
	</div>


	<div class="form-group">
		<form asp-action="Ordering" enctype="multipart/form-data" id="FormSubmit" onsubmit="return validateMyForm()">
				<label class="control-label" style="margin-right:50px;">Orders</label>
				<label class="control-label">Total:</label>
				<input type="number" id="total" name="total" value="0" onchange="check(this)" readonly>
				<button class="btn btn-outline-danger mx-4" type="button" onclick="removeFromOrder()">Remove Item</button>
				
				<button class="btn btn-outline-primary mx-5 mb-2 mt-2" type="submit">Place Orders</button>

				<select id="OrderList" class ="form-control" size="0" ></select>
		</form>

	</div>



<script>
	function updateDisplay(data) {
		const elementDesc = document.getElementById('desc');
		const elementNotes = document.getElementById('notes');
		const elementPrice = document.getElementById('price');
		const elementName = document.getElementById('name');
		const myDict = JSON.parse('@Json.Serialize(ViewBag.MenuItem)');  //This here be legendary. It was all I needed brother. This line of code here allows you pass objects from C# server side to Javascript. Spent 4 hours trying to figure this one out.
		elementDesc.value = myDict[data].descrption;
		elementNotes.value = myDict[data].notes;
		elementPrice.value = '$'+(myDict[data].price).toFixed(2);
        elementName.value = myDict[data].name;
		
		console.log(myDict[data].price);
	}

	function addToOrder() {
		console.log("clickity click!")
        const data = document.getElementById('menuList').value;
        if (data != "") 
		{ 
			const dataName = document.getElementById('name').value;
			const myDict = JSON.parse('@Json.Serialize(ViewBag.MenuItem)');


			const elementOrders = document.getElementById('OrderList');
			const elementTotal = document.getElementById('total');
            const elementForm = document.getElementById('FormSubmit');
            const elementQuantity = document.getElementById('quantity');


            for (i = 0; i < elementQuantity.value; i++) 
			{

				const elementNew = document.createElement('option');
				const elementNewInput = document.createElement('input');

				elementNew.value = data;
				elementNew.innerText = dataName;

				//Adds an input type element to be used in the post functionality of forms
				elementNewInput.value = data;
				elementNewInput.name = 'OrderedItems';

                console.log(i);
				elementForm.append(elementNewInput);
				elementOrders.append(elementNew);
				elementOrders.size += 1;		
			}

            var totalCost = 0;
			for (i = 0; i < elementOrders.length ;i++) {
				totalCost += myDict[elementOrders[i].value].price;
			}

            elementTotal.value = totalCost.toFixed(2);
		}
	}

	function removeFromOrder() {
		console.log("clackity clack!")
        const element = document.getElementById('OrderList');
		const data = element.selectedIndex
        console.log(data);
        if (data != -1) 
		{ 
			const myDict = JSON.parse('@Json.Serialize(ViewBag.MenuItem)');
			const elementNew = document.createElement('option');
            const elementTotal = document.getElementById('total');

			//computes related input index to be removed with removed items
            const index = (element.selectedIndex + 5);
            console.log('index = ' + index);
			const elementForm = document.getElementById('FormSubmit');
            elementForm[index].remove();

            var totalCost = 0;
			element.remove(element.selectedIndex);
			element.size -= 1;
			//checks select element size to verify where to place the selected index after the removal of one index.
            if (element.length > 0 && data - 1 <= 0) {
				element.selectedIndex = 0;
            } 
			else 
			{
				element.selectedIndex = data - 1;
			}


			for (i = 0; i < element.length ;i++) {
				totalCost += myDict[element[i].value].price;
			}

            elementTotal.value = totalCost.toFixed(2);
		}
	}

	function verifyQuantity() { 
        const element = document.getElementById('quantity');
        if (element.value < 1) 
		{ 
            element.value = 1;
		}
	}

	function validateMyForm() {
        console.log("this happened");
        const element = document.getElementById('total');
	   if (element.value == 0) {
			Swal.fire({
			  icon: 'error',
			  title: 'Halt!',
			  text: 'You do not have any orders added!',
			})
           return false;
	   } else {
           return true;
	   }
	 }
</script>

